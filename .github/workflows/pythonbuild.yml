---
name: Python package
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    paths-ignore:
      - '.github/**/*.yml'
      - '.gitignore'
      
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Required due to the way Git works, without it this action won't be able to find any or the correct tags
      
      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"            
          
      - name: DisplayPythonversion
        run: python -c "import sys; print(sys.version)"
        
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build setuptools wheel pipenv
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          
      - name: Lint with Ruff
        run: |
          pip install ruff
          ruff --format=github --target-version=py39 .
        continue-on-error: true
     
      - name: 'Get Previous tag'
        id: previoustag
        uses: "WyriHaximus/github-action-get-previous-tag@v1"
        with:
          fallback: 0.0.0 # Optional fallback tag to use when no tag can be found
        
      - name: 'Get next minor version'      
        id: newtag
        run: |
             release_type=p
             if grep -q "minor" <<< "${{ github.event.head_commit.message }}"; then
             release_type=m
             elif grep -q "major" <<< "${{ github.event.head_commit.message }}"; then
             release_type=M
             elif grep -q "patch" <<< "${{ github.event.head_commit.message }}"; then
             release_type=p
             fi
             echo "$release_type"
             ls -la
             chmod +x increment_version.sh
             echo "newtagvalue=$(./increment_version.sh -$release_type ${{ steps.previoustag.outputs.tag }} )" >> $GITHUB_ENV       
      
      - run: echo "New Tag Value is ${{ env.newtagvalue }}"
        
      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.MY_GITHUB_TOKEN }}
          custom_tag: ${{ env.newtagvalue }}
              
      - name: Build package
        run: |
          cat setup.py
          #sed 's/^version=.*/version=${{ env.newtagvalue }}/' setup.py
          sed -i 's/0.0.2/${{ env.newtagvalue }}/' setup.py
          cat setup.py
          pipenv lock
          python3 setup.py bdist_wheel
          ls -la dist/
          
      - name: Create a GitHub release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.tag_version.outputs.new_tag }}
          name: Release ${{ steps.tag_version.outputs.new_tag }}
          body: ${{ steps.tag_version.outputs.changelog }}
          
      - uses: jfrog/setup-jfrog-cli@v3
        env:
          JF_URL: ${{ secrets.JF_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}   
          
     # Run --version
      - name: Check versions
        run: jf --version && jfrog --version
        
     # This command adds a new server configuration to the JFrog CLI   
     # - run: |
     #   export SERVER_ID="test"
     #    jf c add $SERVER_ID --url=$JF_URL --access-token=$JF_ACCESS_TOKEN --interactive=false
         
     # This action creates a new test file and uploads it to Artifactory   
     # - name: Push Build to Artifactory
     #   run: |
     #        jf rt upload --flat=true '${{ github.workspace }}/dist/src_spark_app-${{ env.newtagvalue }}.whl' apcdl-pypi-local/ 
 
             
             
              
      
           
     
           
             
