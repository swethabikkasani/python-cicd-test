---
name: Python package
on:
  push:
    branches:
      - development
    paths-ignore:
      - README.md
      - CHANGELOG.md # Should never be edited anyway
      - .gitignore
      - .github/**
  pull_request_target:
    branches:
      - development
    types:
      - closed
      
permissions: write-all
      
jobs:  
  build:
    environment:
      name: Development
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' || github.event.pull_request.merged == true }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Required due to the way Git works, without it this action won't be able to find any or the correct tags
          
      - name: 'Get Previous tag'
        id: previoustag
        uses: "WyriHaximus/github-action-get-previous-tag@v1"
        with:
          fallback: 0.0.0 # Optional fallback tag to use when no tag can be found
        
      - name: 'Get next release version'      
        id: newtag
        run: |            
             echo "Head Commit message: ${{ github.event.head_commit.message }}"
             #commit_message=`git log --no-merges -1 --pretty=format:"%s"`
             commit_message=`git log -1 --pretty=format:"%s"`
             echo "$commit_message"
             release_type=p
             if grep -q -i "minor" <<< "$commit_message"; then
             release_type=m
             elif grep -q -i "major" <<< "$commit_message"; then
             release_type=M
             elif grep -q -i "patch" <<< "$commit_message"; then
             release_type=p
             fi
             echo "$release_type"
             ls -la
             chmod +x increment_version.sh
             echo "newtagvalue=$(./increment_version.sh -$release_type ${{ steps.previoustag.outputs.tag }} )" >> $GITHUB_ENV       
      
      - run: echo "New Tag Value is ${{ env.newtagvalue }}"
